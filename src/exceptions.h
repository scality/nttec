#ifndef __NTTEC_EXCEPTIONS_H__
#define __NTTEC_EXCEPTIONS_H__

#include <stdexcept>

namespace nttec {

/** Base class for all the exceptions generated by NTTEC. */
class Exception : public std::runtime_error {
  public:
    explicit Exception(const std::string& reason) : std::runtime_error(reason)
    {
    }
    explicit Exception(const char*& reason) : std::runtime_error(reason) {}
};

/** A faulty logic within the program (a programmer's mistake). */
class LogicError : public Exception {
  public:
    explicit LogicError(const std::string& reason) : Exception(reason) {}
    explicit LogicError(const char* reason) : Exception(reason) {}
};

/** Report an invalid argument. */
class InvalidArgument : public LogicError {
  public:
    explicit InvalidArgument(const std::string& reason) : LogicError(reason) {}
    explicit InvalidArgument(const char* reason) : LogicError(reason) {}
};

/** A domain error. */
class DomainError : public Exception {
  public:
    explicit DomainError(const std::string& reason) : Exception(reason) {}
    explicit DomainError(const char* reason) : Exception(reason) {}
};

/** Raised when no solution exists. */
class NoSolution : public Exception {
  public:
    explicit NoSolution(const std::string& reason) : Exception(reason) {}
    explicit NoSolution(const char* reason) : Exception(reason) {}
};

} // namespace nttec

#endif
